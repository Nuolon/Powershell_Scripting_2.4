$dc01_Object = Get-ADDomainController -Discover -Service 1 -DomainName ZP11G.hanze20
$dc02_Object = Get-ADDomainController -Discover -Service 2 -DomainName ZP11g.hanze20
$dc01_name = [string](Get-ADDomainController -Filter {name -like "IT*"} | Select Name)[0] -replace ".*=" -replace "}"
$dc02_name = [string](Get-ADDomainController -Filter {name -like "IT*"} | Select Name)[1] -replace ".*=" -replace "}"
$username = [Environment]::UserName
add-type -AssemblyName System.Web
$passwordFirst = [System.Web.Security.Membership]::GeneratePassword(24,8) #Length of 24, with 8 non-alpha-numerical characters password generated by the System.web module of powershell.
$passwordSecond = [System.Web.Security.Membership]::GeneratePassword(24,8)
$date = Get-Date
$day = $date.Day
$month = $date.Month
$year = $date.Year #Remember to change back into one variable when script works, this is just a mess...
$tod = $date.TimeOfDay
$hour = $date.Hour
$min = $date.Minute
$sec = $date.Second
$status1 = ""
$status2 = ""
$waitTime = 4
if (!(Get-ADUser -Filter "samaccountname -eq 'R.Tester'") -and !(Get-ADUser -Filter "userprincipalname -eq 'R.Tester@ZP11G.hanze20'")){ #If the r.tester user is not present, it is made and the script will run.
    Write-Warning "The user needed for this script to function 'Replication Tester' is not found, creating it now..."
    Write-Host "Adding user with the following parameters:"
    Write-Host "First name: " -NoNewline -ForegroundColor Cyan
    Write-Host "Replication"
    Write-Host "Last name: " -NoNewline -ForegroundColor Cyan
    Write-Host "Tester"
    Write-Host "Initials & SAM account name: " -NoNewline -ForegroundColor Cyan
    Write-Host "R. and R.Tester"
    Write-Host "Principal name: " -NoNewline -ForegroundColor Cyan
    Write-Host " R.Tester@ZP11G.Hanze20"
    Write-Host "Log-in status: " -NoNewline -ForegroundColor Cyan
    Write-Host "False/Disabled for safety measures" -ForegroundColor Red #The account is disabled, thus It is not allowed to log-on the domain (safety)

    #account is actually created, make sure the password never expires and the enabled tag is set to Disabled which refers to the line above.
    New-ADUser -Name "Replication Tester" -GivenName "Replication" -Surname "Tester" -Initials "R." -SamAccountName "R.Tester" -UserPrincipalName "R.Tester@ZP11G.hanze20" -AccountPassword(ConvertTo-SecureString "$passwordFirst" -AsPlainText -Force) -PasswordNeverExpires $true -Enabled $false
    if ((Get-ADUser -Filter "samaccountname -eq 'R.Tester'") -and (Get-ADUser -Filter "userprincipalname -eq 'R.Tester@ZP11G.hanze20'")){
        Write-Host "Successfully added the user, continuing the script." -BackgroundColor Green -ForegroundColor Black
    } else {
        Write-Host "Unable to add user to the AD for unknown reason... exiting script."
        #exit script on failure with error code 0
        exit 0
    }

} 

if ((Get-ADUser -Filter "samaccountname -eq 'R.Tester'") -and (Get-ADUser -Filter "userprincipalname -eq 'R.Tester@ZP11G.hanze20'")){
    ####~~~Safety measures~~~###
    # The account created in this script has it's enabled flag turned to FALSE. Which means that the account is unable to login onto the domain, but still alows us to use it as a testing mechanism.
    # Furthermore, this script is definitely not optimised for peak, cutting edge, performance however it does its job decently well! The timers might be off a little, depending on CPU power, timing etc
    # But it serves mostly as a little bit of visual feedback.
    # Only this, and first test are commented which serves as enough to understand the scripts usage
    # Author: Nick Dierks, 376141 - n.w.o.dierks@st.hanze.nl

    Write-Host "Account used by script: R. Tester | Replication Tester" -ForegroundColor Cyan

    ####~~~First test~~~###

    Write-Host "**Commencing replication test: $dc01_name TO $dc02_name**" -ForegroundColor Yellow
    Write-Host "__________________________________________________________"
    Write-Host "Changing Password..."
    $pls_before1 = (Get-Aduser R.Tester -Properties passwordlastset -Server $dc01_name).passwordlastset #Locking in time object of user before changing it, serves as a date of when the script last ran.
    Set-ADAccountPassword -Identity R.Tester -NewPassword (ConvertTo-SecureString $passwordFirst -AsPlainText -Force) -Reset -Server $dc01_name #Change the password of the user with a randomly generated one.
    $timer_start1 = Get-Date -Format HH:mm:ss.fff #Locks in time for when the accountpassword setting operation has finished.
    $pls_after1 = (Get-Aduser R.Tester -Properties passwordlastset -Server $dc01_name).passwordlastset #Locking in time object of user after changing it, way to compare between DC's
    Write-Host "Last test started: $pls_before1"
    Write-Host "New test started: $pls_after1"
    Write-Host "Local time: $timer_start1"

    $counter1 = 0
    while (((Get-Aduser R.tester -Properties passwordlastset -Server $dc02_name).passwordlastset -ne $pls_after1) -and ($counter1 -lt $waitTime)){
    $counter1++
    Start-sleep -Seconds 1

    } #Keeps the script running till they are equal, meaning the objects have synced. the -ne tag, means 'not equal' thus it keeps running.

    if ($counter1 -eq $waitTime){
    Write-Host "Connection seems rather slow or not responding, $waitTime seconds have passed going next test." -ForegroundColor Red
    $timer_diff1 = "N/A"
    $timer_end1 = Get-Date -Format HH:mm:ss.fff
    } else {
    $status1 = "1"

    $timer_end1 = Get-Date -Format HH:mm:ss.fff #Locks in time for when the objects have synced.
    Write-Host "External time: $timer_end1"
    $timer_diff1 = New-TimeSpan -Start $timer_start1 -End $timer_end1 #Time difference between before/after sync.

    write-Host "Replication successful, DC: $dc02_name has reported a valid result after -> $timer_diff1!" -ForegroundColor Green
    write-Host "__________________________________________________________"
    }

   
    Write-Host
    ####~~~second test~~~###

    Write-Host "**Commencing replication test: $dc02_name TO $dc01_name**" -ForegroundColor Yellow
    Write-Host "__________________________________________________________"
    Write-Host "Changing Password..."
    $pls_before2 = (Get-Aduser R.Tester -Properties passwordlastset -Server $dc01_name).passwordlastset
    Set-ADAccountPassword -Identity R.Tester -NewPassword (ConvertTo-SecureString $passwordSecond -AsPlainText -Force) -Reset -Server $dc02_name
    $timer_start2 = Get-Date -Format HH:mm:ss.fff
    $pls_after2 = (Get-Aduser R.Tester -Properties passwordlastset -Server $dc01_name).passwordlastset
    Write-Host "Last test started: $pls_before2"
    Write-Host "New test started: $pls_after2"
    Write-Host "External time: $timer_start2"


    $counter2 = 0
    while (((Get-Aduser R.tester -Properties passwordlastset -Server $dc01_name).passwordlastset -ne $pls_after2) -and ($counter2 -lt $waitTime)){
    $counter2++
    Start-sleep -Seconds 1
    }

    if ($counter2 -eq $waitTime){
    Write-Host "Connection seems rather slow or not responding, $waitTime seconds have passed stopping test." -ForegroundColor Red
    $timer_diff2 = "N/A"
    $timer_end2 = Get-Date -Format HH:mm:ss.fff
    } else {
    $status2 = "1"
    $timer_end2 = Get-Date -Format HH:mm:ss.fff
    Write-Host "Local time: $timer_end2"
    $timer_diff2 = New-TimeSpan -Start $timer_start2 -End $timer_end2
    write-Host "Replication successful, DC: $dc01_name has reported a valid result after -> $timer_diff2!" -ForegroundColor Green
    }

    write-Host "Saving logs to C:/Replication_logs..."


    #$status1 = ""
    #$timer_diff1 = "N/A"
    #$timer_diff2 = "N/A"
    New-Item -Path C:\Replication_logs -ItemType Directory -Force | Out-Null
    New-Item -Path C:\Replication_Logs\D$day-M$month-Y$year-H$hour-M$min-S$sec.txt | Out-Null
    if (($status1) -and ($status2)){
    Add-Content -Path C:\Replication_Logs\D$day-M$month-Y$year-H$hour-M$min-S$sec.txt -Value "Status: Succesful"
    } else {
    Add-Content -Path C:\Replication_Logs\D$day-M$month-Y$year-H$hour-M$min-S$sec.txt -Value "Status: Failure"
    }
    $lastTime = New-TimeSpan -Start $pls_before1 -End $pls_after1
    Add-Content -Path C:\Replication_Logs\D$day-M$month-Y$year-H$hour-M$min-S$sec.txt -Value "Wait time: $waitTime"
    Add-Content -Path C:\Replication_Logs\D$day-M$month-Y$year-H$hour-M$min-S$sec.txt -Value "Time since last test: $lastTime"
    Add-Content -Path C:\Replication_Logs\D$day-M$month-Y$year-H$hour-M$min-S$sec.txt -Value "********************************************"

    Add-Content -Path C:\Replication_Logs\D$day-M$month-Y$year-H$hour-M$min-S$sec.txt -Value "Test-started: $timer_start1"
    Add-Content -Path C:\Replication_Logs\D$day-M$month-Y$year-H$hour-M$min-S$sec.txt -Value "Test-ended: $timer_end2"
    Add-Content -Path C:\Replication_Logs\D$day-M$month-Y$year-H$hour-M$min-S$sec.txt -Value "Executed By: $username"
    Add-Content -Path C:\Replication_Logs\D$day-M$month-Y$year-H$hour-M$min-S$sec.txt -Value "********************************************"

    Add-Content -Path C:\Replication_Logs\D$day-M$month-Y$year-H$hour-M$min-S$sec.txt -Value "$dc01_name -> $dc02_name = $timer_diff1"
    Add-Content -Path C:\Replication_Logs\D$day-M$month-Y$year-H$hour-M$min-S$sec.txt -Value "$dc02_name -> $dc01_name = $timer_diff2"
    

}